{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Closing the Loop in 3D Printing","text":""},{"location":"#welcome-to-cl3dp-documentation","title":"Welcome to CL3DP Documentation","text":"<p> This guide provides a comprehensive walkthrough for installing, testing, and conducting ink printing experiments using Aerotech stages. The document outlines the essential software installations necessary for the process and offers a brief overview of each software component.</p> <p> Note: This document is targeted towards setup in Barton Research Group at University of Michigan. If you intend to develop for company in collaboration, there are some changes in hardware which are as follow: </p> <ol> <li><p> Cameras used at UofM is manufactured by Basler which uses PylonSDK. Python library for that is called PyPylon which can be installed from upstream package manager like Pip. While in case of company in collaboration, the camera is manufactured by Teledyne Flir which uses Spinnaker SDK. Spinnaker has customized Python SDK which can only be downloaded from their website. Make sure to check version of base SDK and Python one since they need to be same for compatibility. </p></li> <li><p> Stages used at UofM and company in collaboration are from the same manufacturer and hence the codebase is similar. There is a small difference in extrusion system. For UofM system, the pressure is used to control extrusion so apply pressure to print and cut suppy to stop. While in case of company, they have an extra 4th stage which acts as a smart pump. For them the pressure is kept on for the entire experiment and this 4th stage moves up-down to allow flow of ink. </p></li> </ol>"},{"location":"ctrl/","title":"Controller Overview","text":"<p> A P-type controller is implemented in src -&gt; control -&gt; controller.py based on the reference line width to output stage speed for achieving that line width. The configuration file containing process model parameters resides in config -&gt; controller.yaml which has following structure:</p> <pre><code># File -&gt; controller.yaml\n\nparams:\n    - gain: 201.22\n    - bias: 22.705\n    - C: 0.2\n    - ref_line_width: 280\n</code></pre>"},{"location":"ctrl/#controller-test","title":"Controller Test","text":"<p> In order to test if the controller is working as expected, we can run  tests -&gt; controller -&gt; controller_run.py  file which takes reference line width as input parameter from  controller.yaml  config file to generate stage speed to achieve that line width. </p> <pre><code>python tests/controller/controller_run.py\n</code></pre> <p></p> <p> For a given reference line widht of 280 microns, initial stage speed according to the controller is 0.44187 mm/s. After a new line is printed at this speed, we will estimate line width using a vision system and that will serve as input for next iteration. This process will go on till the controller converges (error is less than some delta). </p>"},{"location":"install/","title":"Overview","text":""},{"location":"install/#a3200-motion-controller-software","title":"A3200 Motion Controller Software","text":"<p> Developed by Aerotech, the A3200 software facilitates interaction with motion stages. While the Motion Composer is typically employed, integration with MATLAB or Python scripts is also supported. This guide emphasizes a Python-based approach, highlighting how to utilize the A3200's communication features to interface with the ASCII server and control the stages via the host computer's IP address.</p>"},{"location":"install/#camera-integration-for-feedback","title":"Camera integration for Feedback","text":"<p> The implementation incorporates vision algorithms utilizing cameras from Basler (Pylon) and Blackfly. These cameras serve as feedback mechanisms, enabling precise line width estimation for controller inputs. Python APIs provided by both camera manufacturers are leveraged to maximize their functionalities.</p>"},{"location":"install/#anaconda-for-python-environment-management","title":"Anaconda for Python Environment Management","text":"<p> Given that the project is Python-centric, managing different Python package versions is crucial. This guide recommends using Conda environments for this purpose. Conda is highly effective in duplicating a set of dependencies, streamlining the setup process.</p>"},{"location":"install/#git-bash-for-windows-development","title":"Git Bash for Windows Development","text":"<p> The development environment is based on Windows, where native Linux commands are not directly applicable. Git Bash is introduced as a solution to this limitation. This guide includes instructions to configure Conda within Git Bash, addressing the absence of native Conda support.</p>"},{"location":"install/#source-code-and-initial-setup","title":"Source Code and Initial Setup","text":"<p> The software package is hosted on GitHub. Detailed instructions for the initial setup and configuration are provided. While new system installations may encounter missing dependencies, this guide assures easy resolution through pip or Conda, ensuring a smooth environment setup.</p>"},{"location":"install/a3200/","title":"A3200 Overview","text":"<p> The Aerotech A3200 is a powerful and versatile software platform designed for high-precision motion control. It is widely used in various industries including manufacturing, automation, and research. The A3200 integrates motion, vision, PLC, robotics, and I/O control into a unified architecture, providing a comprehensive solution for complex automation tasks. Currently, it is supported only for Windows OS.</p> <ol> <li> <p>Download A3200 software from Aerotech website </p> </li> <li> <p>Open A3200 configuration manager with system specific configuration file </p> </li> <li> <p>Open A3200 CNC Operator and test stage movements </p> </li> </ol>"},{"location":"install/camera/","title":"Camera","text":"<p> Our system is optimized for seamless operation with Basler's Pylon cameras, utilizing the Pylon SDK and the PyPylon API for effortless control and integration. To get started, the first essential step is to install the Pylon Software from Basler. This ensures that you can leverage the full capabilities of Basler cameras within our system, providing you with high-quality imaging and efficient control.</p> <ol> <li> <p>Download Pylon SDK from Basler's Website</p> <ul> <li>Navigate to the Basler Pylon SDK download page.</li> <li>Ensure you are on the official Basler website to avoid any unauthorized or malicious software. </li> </ul> </li> <li> <p>Select Camera Suite for Windows</p> <ul> <li>On the download page, locate the section for Windows OS.</li> <li>Choose the appropriate camera suite that matches your operating system version (e.g., Windows 10, 64-bit). </li> </ul> </li> <li> <p>Fill in Details to Download SDK</p> <ul> <li>You may be prompted to fill out a form with your personal and professional details.</li> <li>Provide accurate information as required by Basler to proceed with the download. </li> </ul> </li> <li> <p>Download .exe File</p> <ul> <li>After submitting the form, the download link for the Pylon SDK installer (.exe file) will be provided.</li> <li>Click on the link to download the installer to your local machine. </li> </ul> </li> <li> <p>Agree to Terms and Conditions</p> <ul> <li>Run the downloaded .exe file.</li> <li>A prompt will appear asking you to read and agree to the terms and conditions.</li> <li>Carefully review the terms and conditions, then click \"Agree\" to proceed. </li> </ul> </li> <li> <p>Select Developer Profile</p> <ul> <li>The installer will ask you to choose a profile.</li> <li>Select the \"Developer\" profile to ensure you have all necessary tools and libraries for development purposes. </li> </ul> </li> <li> <p>Select All Applicable Interfaces</p> <ul> <li>You will be prompted to select interfaces that are applicable to your setup.</li> <li>Choose all the interfaces relevant to your cameras and applications (e.g., USB, GigE). </li> </ul> </li> <li> <p>Keep the Default Destination Folder</p> <ul> <li>The installer will suggest a default destination folder for the Pylon SDK installation.</li> <li>It is recommended to keep the default destination unless you have specific requirements. </li> </ul> </li> <li> <p>Verify and Install Pylon SDK</p> <ul> <li>Review your selections and settings before proceeding.</li> <li>Click \"Install\" to begin the installation process. </li> </ul> </li> <li> <p>Wait for Installation to Complete</p> <ul> <li>The installation process will take a few minutes.</li> <li>Wait patiently until all components are installed. </li> </ul> </li> <li> <p>Close Installer</p> <ul> <li>Once the installation is complete, a prompt will indicate that the process is finished.</li> <li>Click \"Close\" to exit the installer. </li> </ul> </li> <li> <p>Open Pylon Viewer to Test Camera</p> <ul> <li>After installation, locate the Pylon Viewer application from your start menu or desktop shortcut.</li> <li>Launch Pylon Viewer to ensure that your camera is correctly recognized and functioning.</li> <li>Test the camera by capturing images or video to verify the setup. </li> </ul> </li> </ol>"},{"location":"install/conda/","title":"Anaconda","text":"<p>Step-by-Step Guide to Installing Miniconda</p> <ol> <li>Download Miniconda from Their Website<ul> <li>Navigate to the Miniconda download page.</li> <li>Ensure you select the appropriate installer for your operating system (Windows in this case). </li> </ul> </li> </ol> <p>Note: Unless specified below, keep the default settings in the installer.</p> <ol> <li> <p>Agree to User License</p> <ul> <li>Run the downloaded Miniconda installer.</li> <li>A prompt will appear asking you to read and agree to the user license agreement.</li> <li>Carefully review the agreement, then click \"I Agree\" to proceed. </li> </ul> </li> <li> <p>Select All Users if Admin Privileges are Available</p> <ul> <li>The installer will prompt you to choose between installing Miniconda for \"Just Me\" or \"All Users\".</li> <li>Select \"All Users\" if you have administrative privileges on your machine to allow all users to access Miniconda. </li> </ul> </li> <li> <p>Add Anaconda3 to PATH Environment</p> <ul> <li>During the installation process, you will see an option to add Anaconda3 to your PATH environment variable.</li> <li>Check the box to add Anaconda3 to the PATH. This makes it easier to use conda from the command line. </li> </ul> </li> <li> <p>Finish Setup</p> <ul> <li>Continue through the installation process, keeping the default settings unless you have specific preferences.</li> <li>Once the installation is complete, a prompt will indicate that the process is finished. </li> </ul> </li> </ol>"},{"location":"install/git_bash/","title":"Git Bash","text":"<ol> <li> <p>Download Git Bash from Git Website</p> <ul> <li>Navigate to the Git website.</li> <li>Ensure you are on the official Git website to avoid any unauthorized or malicious software. </li> </ul> </li> <li> <p>Select 64-bit Git for Windows Setup in Standalone Installer</p> <ul> <li>On the download page, select the 64-bit Git for Windows setup.</li> <li>Choose the standalone installer for ease of installation. </li> </ul> <p>Note: Unless specified, keep the default settings in the installer.</p> </li> <li> <p>Open Git Bash Setup Tool</p> <ul> <li>Open the directory where Git Bash is download.</li> <li>Now execute the Git Bash Setup Tool and follow next steps. </li> </ul> </li> <li> <p>Keep Default Component Selection</p> <ul> <li>The setup tool will present a list of components to install.</li> <li>Keep the default component selection to ensure all necessary components are installed. </li> </ul> </li> <li> <p>Change Default Branch Name to Main Instead of Master</p> <ul> <li>During the setup process, you will be prompted to configure the default branch name for new repositories.</li> <li>Change the default branch name from \"master\" to \"main\" to align with modern conventions. </li> </ul> </li> <li> <p>Complete Installation and Press Finish</p> <ul> <li>Continue through the installation process, keeping the default settings unless you have specific preferences.</li> <li>Once the installation is complete, a prompt will indicate that the process is finished. </li> </ul> </li> <li> <p>Configure Git Bash to Work with Anaconda</p> <ul> <li> <p>If Anaconda is installed for the current user, navigate to the following location:</p> <p><code>{User} -&gt; AppData -&gt; Local -&gt; miniconda3 -&gt; etc -&gt; profile.d</code></p> </li> <li> <p>If Anaconda is installed for all users or in the root directory, navigate to:</p> <p><code>{User} -&gt; miniconda3 -&gt; etc -&gt; profile.d</code></p> </li> </ul> <p></p> <p></p> <ul> <li> <p>Open Git Bash from directory containing profile.d and execute following command:</p> <pre><code>echo \". ${PWD}/conda.sh\" &gt;&gt; ~/.bashrc\n</code></pre> </li> <li> <p>If the path contains spaces even in user name then use following command:</p> <pre><code>echo \". '${PWD}'/conda.sh\" &gt;&gt; ~/.bashrc\n</code></pre> </li> <li> <p>Open a new Git Bash terminal and write conda in it to test if its working:</p> <pre><code>conda \n</code></pre> </li> </ul> </li> </ol>"},{"location":"install/src_code/","title":"Source Code","text":"<ol> <li> <p>Download cl3dp Repo from GitHub Either Via Xxtracting zip to Desired Location OR Cloning the Repo</p> <p></p> </li> <li> <p>Open Root Directory of cl3dp in Git Bash</p> <p></p> </li> <li> <p>Create a New Conda Environment</p> <ul> <li>Use the following command to create a new conda environment with Python 3.8:</li> </ul> <pre><code>conda create --prefix envs python=3.8 \n</code></pre> <p></p> </li> <li> <p>Activate Conda Environment and Install Dependencies</p> <ul> <li> <p>Activate te newly created conda environment with the following command:</p> <pre><code>conda activate ./envs \n</code></pre> </li> <li> <p>Install the required dependencies listed in the requirement.txt file:</p> <pre><code>pip install -r requirements.txt \n</code></pre> </li> </ul> </li> <li> <p>Possible Errors:</p> <ul> <li>Environment Activation Error : If you encounter an error activating the environment, ensure      you are in correct directory and the environment path is correct.</li> <li>Dependency Installation Error : If there are error installing dependencies, check for typos in      the file name and ensure all required packages are listed in the requirements.txt file.</li> <li>Compantibility Issues: If there are compatibility issues with Python 3.8, consider using a different     Python version specified in the project's documentation.</li> </ul> </li> </ol> <pre><code># sympy not found\npip install sympy\n\n# yaml not found\npip install pyyaml\n\n# argparse not found\npip install argparse\n\n# numpy not found\npip install numpy\n\n# cv2 not found\npip install opencv-python\n\n# pypylon not found\npip install pypylon\n\n# scipy not found \npip install scipy\n</code></pre>"},{"location":"printer/","title":"Printer Overview","text":"<p> Printer Class is the main class which will handle initialization of stages and controller. Images captured by camera interface will be pass to printer class. The location of this file is  src  -&gt; system -&gt; printer.py  and the configuration file is  config -&gt; printer.yaml  parameters to which are as follow:</p> <pre><code># File -&gt; printer.yaml\n\naxes:\n    - x_axis:\n        - id: 0\n        - speed: 5\n        - speed_fast: 50\n    - y_axis:\n        - id: 1\n        - speed: 5\n        - speed_fast: 50\n    - z_axis:\n        - id: 2\n        - speed: 50\n        - speed_slow: 0.5\n\ncamera_offset:\n    - -98.3159\n    - 1.1260\n    - 5.2599\n\nmoving_height: 18\n\n recipe:\n    - 0\n    - 0\n    - 0\n</code></pre>"},{"location":"printer/#printer-test","title":"Printer Test","text":"<p> Printer Class could be tested in two ways, one is to test movement without pressure and one with pressure.</p>"},{"location":"printer/#1-movement-test","title":"1. Movement Test","text":"<p> In order to test the movement of the stages, three scripts corresponding to each stage is provided in  tests -&gt; move  directory.</p> <pre><code>Note: Use +/- ve with --displacement flag to change direction of movement\n</code></pre> <p>Move stages in x axis: <pre><code>python tests/move/x.py --displacement 10 --speed 1\n</code></pre></p> <p>Move stages in y axis: <pre><code>python tests/move/y.py --displacement 10 --speed 1\n</code></pre></p> <p>Move stages in z axis: <pre><code>python tests/move/z.py --displacement 2 --speed 0.5\n</code></pre></p>"},{"location":"printer/#2-print-test","title":"2. Print Test","text":"<p> In order to test the printing, two scripts are provided one of which prints vertically and other horizontally in  tests -&gt; print  directory.</p> <p>Print line horizontally: <pre><code>python tests/print/horizontal_line.py --displacement 15 --speed 0.4 --pressure 10\n</code></pre></p> <p>Print line vertically: <pre><code>python tests/print/vertical_line.py --displacement 15 --speed 0.4 --pressure 10\n</code></pre></p>"},{"location":"stages/","title":"Stages Overview","text":"<p> Codebase to control stages resides in src -&gt; stages -&gt; stage_control.py and the configuration file resides in config -&gt; stages.yaml. Make sure to configure stages.yaml according to system setup parameters to which  are as follow: </p> <pre><code># File -&gt; stages.yaml\n\n- connection:\n    - PC_IP_ADDRESS: \"xxx.xxx.xxx.xxx\"\n    - PORT: 8000\n    - SOCKET_TIMEOUT: 600\n- mode:\n    - incremental: True\n- substrate:\n    - GLASS: 0\n    - SILICON: 1\n</code></pre> <p>Note: There are some parameters for Safety Zone which will be implemented later.</p>"},{"location":"stages/connect/","title":"Stages Connection Setup","text":"<ol> <li> <p>Extract IP address of current host computer attached to stages:</p> <ul> <li> <p>Open command prompt and use following command:</p> <pre><code> ipconfig \n</code></pre> </li> </ul> <p></p> <p>From the output use Ethernet adapter's IPv4 Address. Incase you are using WiFi adapter, use that IPv4 instead.</p> </li> <li> <p>Get Port for ASCII server:</p> <ul> <li> <p>Open A3200 Configuration Manager and int he left pane go to following parameter:</p> <p>config_file -&gt; System -&gt; Communication -&gt; ASCII -&gt; CommandPort</p> </li> </ul> <p></p> <p>Note: Keep all other parameters default for now.</p> </li> </ol>"},{"location":"stages/connect/#stage-connection-test","title":"Stage Connection Test","text":"<p> In order to test if the connection with stages is established, we can run **test -&gt; stages -&gt; stages-enable.py** file which will enable all three (X, Y and Z stage) by using following command: </p> <pre><code>python tests/stages/stages_enable.py \n</code></pre> <p></p> <p>The output states following:</p> <ul> <li>Stages Enabled: All three stages (X, Y, and Z) are enabled in incremental mode.</li> <li>Unit System: The system is using SI units (Metric, Second).</li> <li>RAMP Rate: The RAMP rate is set to 100.</li> <li>Safezones: All safezones are cleared.</li> <li>Connection Status: The Aerotech connection is closed after sending the commands.</li> </ul> <p>You can verify these settings using the A3200 CNC Operator.</p> <p></p>"},{"location":"stages/pressure/","title":"Pressure to Voltage Mapping","text":"<p> The model to convert pressure in PSI to dedicated voltage will be impletement in printer.py file. That voltage would then be passed to setPressure method in Aerotech Class declared in stage_control.py. </p> <pre><code>def set_pressure(self, pressure = None):\n    \"\"\"\n    Method to set pressure of the system.\n\n    Parameters:\n        pressure (float) : Using the process model intended pressure is converted\n                           to respective voltage.\n\n    Note:\n        Here analog pin0 on X stage is used which might not always be the case\n    \"\"\"\n    if pressure != None:\n        msg = '$AO[1].X = '\n        msg += '%0.6f' %pressure\n    else:\n        raise ValueError('staging.setPressure() was called with all None arguments')\n    msg += '\\n'\n    print(msg)\n    self.send_message(msg)\n</code></pre> <p> Two considerations to keep in mind, the pressure passed as argument to set_pressure method is corresponding voltage (not PSI) and it can be seen that the pressure circuit it attached in X stage controller.</p> <p> The pressure.yaml configuration file contains gain and bias to convert either  pressure (PSI) -&gt; voltage  or vica versa: </p> <pre><code># File -&gt; pressure.yaml\n\nparams:\n    - gain: 0.0844\n    - bias: 0.0899\n</code></pre> <pre><code>voltage = gain * pressure + bias  # PSI -&gt;  V\npressure = (voltage - bias) /gain # V   -&gt;  PSI\n</code></pre>"},{"location":"stages/pressure/#pressure-test","title":"Pressure Test","text":"<p> In order to test the pressure, we can run  tests -&gt; stages -&gt; pressure_test.py  using following command from root directory: (Pressure is passed as an argument in PSI along with regulator and solenoid enabler) </p> <pre><code>python tests/stages/pressure_test.py --pressure 12\npython tests/stages/pressure_test.py --pressure 0\n</code></pre>"},{"location":"vision/","title":"Vision Overview","text":"<p> The end goal is to have camera interface which can easily to configured such that both Pylon and Spin API could be used in the system. </p>"},{"location":"vision/#vision-test","title":"Vision Test","text":"<p> This is a sample script which will search all the attached cameras in the network and  display output. To run the script execute following command:</p> <pre><code>python tests/camera/cam.py\n</code></pre>"}]}